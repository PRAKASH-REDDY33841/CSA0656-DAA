#include <stdbool.h>
#include <stdio.h>

#define V 4  // Number of vertices in the graph

// Function to print the solution
void printSolution(int color[]) {
    printf("Solution Exists: Following are the assigned colors\n");
    for (int i = 0; i < V; i++)
        printf(" %d ", color[i]);
    printf("\n");
}

// Function to check if the current color assignment is safe for vertex v
bool isSafe(int v, bool graph[V][V], int color[], int c) {
    for (int i = 0; i < V; i++)
        if (graph[v][i] && c == color[i])
            return false;
    return true;
}

// A recursive utility function to solve the graph coloring problem
bool graphColoringUtil(bool graph[V][V], int m, int color[], int v) {
    // Base case: If all vertices are assigned a color, return true
    if (v == V)
        return true;

    // Consider this vertex v and try different colors
    for (int c = 1; c <= m; c++) {
        // Check if assignment of color c to v is safe
        if (isSafe(v, graph, color, c)) {
            color[v] = c;

            // Recur to assign colors to the rest of the vertices
            if (graphColoringUtil(graph, m, color, v + 1))
                return true;

            // If assigning color c doesn't lead to a solution, remove it (backtrack)
            color[v] = 0;
        }
    }

    // If no color can be assigned to this vertex, return false
    return false;
}

// This function solves the m Coloring problem using backtracking.
// It mainly uses graphColoringUtil() to solve the problem. It returns false
// if the m colors cannot be assigned, otherwise, it returns true and
// prints the assignments of colors to all vertices.
bool graphColoring(bool graph[V][V], int m) {
    // Initialize all color values as 0. This initialization is needed
    // because the same color is used for all vertices initially.
    int color[V];
    for (int i = 0; i < V; i++)
        color[i] = 0;

    // Call graphColoringUtil() for vertex 0
    if (graphColoringUtil(graph, m, color, 0) == false) {
        printf("Solution does not exist\n");
        return false;
    }

    printSolution(color);
    return true;
}

int main() {
    /* Create following graph and test whether it is 3 colorable
       (3)---(2)
        |   / |
        |  /  |
        | /   |
       (0)---(1)
    */
    printf("R.Gnana Prakash Reddy - 192211740\n");
    bool graph[V][V] = {{0, 1, 1, 1},
                        {1, 0, 1, 0},
                        {1, 1, 0, 1},
                        {1, 0, 1, 0}};
    int m = 3; // Number of colors
    graphColoring(graph, m);
    return 0;
}
