#include <stdio.h>
#include <limits.h>

#define INF INT_MAX
#define V 4  // Number of vertices

// Function to print the solution matrix
void printSolution(int dist[V][V]) {
    printf("Shortest distances between every pair of vertices:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("%7s", "INF");
            else
                printf("%7d", dist[i][j]);
        }
        printf("\n");
    }
}

// Floyd-Warshall algorithm
void floydWarshall(int graph[V][V]) {
    int dist[V][V];

    // Initialize distance array with graph weights
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            dist[i][j] = graph[i][j];
        }
    }

    // Main loop of Floyd-Warshall algorithm
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print the shortest distance matrix
    printSolution(dist);
}

int main() {
    // Example graph represented as an adjacency matrix
    printf("R.Gnana prakash Reddy - 192211740\n");
    int graph[V][V] = {
        {0, 3, INF, INF},
        {2, 0, INF, 1},
        {INF, 7, 0, 2},
        {6, INF, 4, 0}
    };

    floydWarshall(graph);

    return 0;
}
