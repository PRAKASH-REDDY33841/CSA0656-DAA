#include <stdio.h>
#include <limits.h>

// Function to calculate the sum of frequencies from i to j
int sum(int freq[], int i, int j) {
    int s = 0;
    for (int k = i; k <= j; k++)
        s += freq[k];
    return s;
}

// Function to find the optimal cost of the binary search tree
int optimalBST(int keys[], int freq[], int n) {
    // cost[i][j] will store the cost of optimal BST that can be formed
    // from keys[i] to keys[j].
    int cost[n][n];

    // Initialize cost when the subtree contains only one key
    for (int i = 0; i < n; i++)
        cost[i][i] = freq[i];

    // Now we need to consider chains of length 2, 3, ..., n.
    // l is the length of the chain.
    for (int l = 2; l <= n; l++) {
        // i is the starting index of the chain.
        for (int i = 0; i <= n - l; i++) {
            // Get the ending index of the chain from starting index i and length l
            int j = i + l - 1;
            cost[i][j] = INT_MAX;

            // Try making all keys in interval keys[i..j] as root
            for (int r = i; r <= j; r++) {
                // c = cost when keys[r] becomes root of this subtree
                int c = ((r > i) ? cost[i][r - 1] : 0) +
                        ((r < j) ? cost[r + 1][j] : 0) +
                        sum(freq, i, j);
                if (c < cost[i][j])
                    cost[i][j] = c;
            }
        }
    }

    // cost[0][n-1] stores the minimum cost of the optimal BST
    return cost[0][n - 1];
}

int main() {
    int keys[] = {10, 12, 20};
    int freq[] = {34, 8, 50};
    int n = sizeof(keys) / sizeof(keys[0]);
    printf("R.Gnana Prakash Reddy - 192211740\n");
    printf("Cost of the Optimal Binary Search Tree is %d\n", optimalBST(keys, freq, n));
    return 0;
}
