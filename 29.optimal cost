#include <stdio.h>
#include <limits.h>

#define V 4  // Number of vertices

// Function to find the minimum cost of visiting all cities
int tsp(int graph[V][V], int dp[1 << V][V], int mask, int pos) {
    // Base case: if all cities are visited, return to the starting city
    if (mask == (1 << V) - 1) {
        return graph[pos][0];
    }

    // If this state has already been computed, return the stored result
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    int ans = INT_MAX;

    // Try to go to every other city that has not been visited yet
    for (int city = 0; city < V; city++) {
        if ((mask & (1 << city)) == 0) {
            // Calculate the cost for the current state
            int newAns = graph[pos][city] + tsp(graph, dp, mask | (1 << city), city);
            ans = (ans < newAns) ? ans : newAns;
        }
    }

    // Store the result and return it
    dp[mask][pos] = ans;
    return ans;
}

int main() {
    int graph[V][V] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    int dp[1 << V][V];
    for (int i = 0; i < (1 << V); i++) {
        for (int j = 0; j < V; j++) {
            dp[i][j] = -1;
        }
    }

    int minCost = tsp(graph, dp, 1, 0);  // Mask = 1 (only the starting city is visited), Position = 0
    printf("R.Gnana Prakash Reddy - 192211740\n");

    printf("Minimum cost of visiting all cities: %d\n", minCost);

    return 0;
}
